def templatePath = "monorepo/packages/itinerary/cicd/template-preprod.json"

//QUAY IMAGE REGISTRY
def quayRegistryHostname = "prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in"
def quayRegistryOrgNamePreProd = "mfrevamp-preprod/itinerary"
def quayRegistryOrgNameProd = "mfrevamp-prod/itinerary"

//CLUSTER AND SONARQUBE URLS
def clusterApiUrl= "https://api.ocpmgmtcl01.goindigo.in:6443"
def ocpRegistryUrl ="image-registry.openshift-image-registry.svc:5000"
def ocpSonarqubeUrl = "https://sonarqube-sonarqube.apps.ocpmgmtcl01.goindigo.in/"
def name="itinerary"

//Email ID's Detail
def mailToRecipients = "Priyanka.x.Koneru@goindigo.in"
def mailToRecipientspreprod = 'Priyanka.x.Koneru@goindigo.in'
def mailToRecipientsprod = 'abhinav.srivastava@goindigo.in'
def useremail='Priyanka.x.Koneru@goindigo.in'


pipeline {

    agent { label 'nodejs-common' }

    environment {

        PROJECT_PREPROD = "mfrevamp-preprod"
        PROJECT_PROD = "mfrevamp-prod"
        NAME = "itinerary"
        ENV_PREPROD = "preprod"
        ENV_PROD = "prod"
        QUAY_REPO_NAME_PREPROD="mfrevamp-preprod/itinerary"
        QUAY_REPO_NAME_PROD="mfrevamp-prod/itinerary"
        QUAY_URL="https://prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in"
        SONAR_LOGIN= credentials('sonarqube_login_token')
    }

    stages {

        stage('Checkout') {

            steps {
                checkout scm                
            }
        } //End of Stage Checkout
      
        stage('Code Quality Check via SonarQube') {
          steps {
             script {
               def scannerHome = tool 'sonarqube_server_mgmt';
                 withSonarQubeEnv("sonarqube_server_mgmt") {
                 sh "${tool("sonarqube_server_mgmt")}/bin/sonar-scanner \
                 -Dsonar.projectKey=itinerary-uirevamp-preprod \
                 -Dsonar.sources=/home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/itinerary \
                 -Dsonar.css.node=. \
                 -Dsonar.host.url=https://sonarqube-sonarqube.apps.ocpmgmtcl01.goindigo.in \
                 -Dsonar.login=${SONAR_LOGIN}"
               }
           }
        }
        }
        /*stage("Quality gate") {
            steps {
                waitForQualityGate abortPipeline: false
            }
        post{
                success {
                    emailext to: "${mailToRecipients}",
                    subject: "${NAME} Sonarqube (Code Analysis)",
                    body: " Sonarqube (Code Analysis) is Successful for ${NAME} with build number ${env.BUILD_NUMBER} <br> Sonarqube login URL ${ocpSonarqubeUrl} <br> Please check the report after login into sonarqube server URL by using Azure Active Directory Credentials"
                }
                failure {  
                    mail bcc: '', body: "<b>${NAME} sonarqube analysis failed. Please login using the following URL to check the report--->  ${ocpSonarqubeUrl} </b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> Build URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'OCPSUPPORT@goindigo.in', mimeType: 'text/html', replyTo: '', subject: "SonarQube Quality Gate Failure: Project name -> ${env.JOB_NAME}", to: "${mailToRecipients}";  
                }  
           }
        }*/ 
        stage('build') {
            steps { 
                script{
                   sh """
                    mkdir /home/jenkins/agent/app
                    cp /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/package.json /home/jenkins/agent/app/
                    cd /home/jenkins/agent/app
                    mkdir -p /home/jenkins/agent/app/packages/itinerary
                    mkdir -p /home/jenkins/agent/app/packages/skyplus-design-system-app
                    cp /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/itinerary/package.json /home/jenkins/agent/app/packages/itinerary
                    cp /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/skyplus-design-system-app/package.json /home/jenkins/agent/app/packages/skyplus-design-system-app
                    cd /home/jenkins/agent/app
                    export npm_config_cache=/home/jenkins/agent/app
                    npm install
                    cp -r /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/itinerary /home/jenkins/agent/app/packages
                    cp -r /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/skyplus-design-system-app /home/jenkins/agent/app/packages
                    cd /home/jenkins/agent/app/packages/skyplus-design-system-app && npm run build
                    cd /home/jenkins/agent/app/packages/itinerary && npm run build
                    ls -ltra /home/jenkins/agent/app/packages/itinerary/
                    cp -r /home/jenkins/agent/app/packages/itinerary/dist /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo
                    """
                }
            }
        } //End of Stage Build

        stage ('Deploy Template for PreProd') {

        steps{
        script{
                try {
            openshift.withCluster() {
                openshift.withProject(env.PROJECT_PREPROD) {
                        echo "Using project: ${openshift.project()}"

                        def templateSelector = openshift.selector( "template", "${NAME}")

                        if(openshift.selector("bc", [ template : "${NAME}"]).exists()){
                        openshift.selector("bc", "${NAME}").delete();
                        }
                        if(openshift.selector("is", [ template : "${NAME}"]).exists()){
                        openshift.selector("is", "${NAME}").delete();
                        }

                        openshift.newApp(templatePath, "-p PROJECT_PREPROD=${env.PROJECT_PREPROD} -p NAME=${env.NAME} -p ENV_PREPROD=${env.ENV_PREPROD}")

                        }
                        }
                        }

                    catch ( e ) {
                        echo e.getMessage()
                        error "Deploy Template not successful."
                        }
            }
            }
        } // End of Stage Deploy Template for PreProd
          
        stage('Image build for PreProd') {

            steps{
            script{
            try {
            timeout(time: 60, unit: 'MINUTES') {
                    openshift.withCluster() {
                    openshift.withProject(env.PROJECT_PREPROD) {
                    def build = openshift.selector("bc", "itinerary").startBuild("--from-file=/home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo", "--wait=true")
                    build.untilEach {
                        echo "Using project in Image Build ${build}"
                        return it.object().status.phase == "Complete"
                    }
                    }
                    }
                }
                echo "STAGE Image Build Template Finished"
                }
                catch ( e ) {
                    echo e.getMessage()
                    error "Build not successful."
                }
                }
            }
            post{
                always{
                    echo 'PreProd environment Build is completed'  
                }
                success {  
                    emailext to: "${mailToRecipients}",
                    subject: "${NAME} Build status,",
                    body: "Build is Successful. kindly refer the build log at ${env.BUILD_LOG}  for any further reference"
                }  
                failure {  
                    mail bcc: '', body: "<b>${NAME}</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "${mailToRecipients}";  
                }  
                unstable {  
                    echo 'PreProd environment Build is marked as unstable'  
                }  
                changed {  
                    echo 'PreProd environment Build stage status changed'  
                    echo 'PreProd environment Build previously failing but is now successful'  
                }

            }
            } // End of Stage Image build for PreProd

        stage('Pushing source code to TFS- security branch') {
                    
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubtoken', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    set -e
                    echo "Setting email and name for git config"
                    git config --global user.email "biswajit.dey@goindigo.in"
                    git config --global user.name "$USERNAME"
                    echo "deleting old cloned folder"
                    rm -rf mf-itinerary
                    echo "Cloning github code"
                    git clone -b mf-itinerary "https://$USERNAME:$PASSWORD@github.com/security-branch/microfrontend-uirevamp.git" mf-itinerary
                    cd mf-itinerary
                    echo "Deleting all source code from exiting git folder"
                    rm -rf *
                    git add .
                    git commit -m "Deleting old source code"
                    sleep 2
                    echo "Copying source code"
                    cp -r /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/itinerary .
                    sleep 2
                    echo "Adding files for commit "
                    git add itinerary
                    git commit -m "Taging new source code to the branch for secuity test"
                    git push "https://$USERNAME:$PASSWORD@github.com/security-branch/microfrontend-uirevamp.git"
                    """
                }
            }
          }
        } //Pushing source code to TFS- security branch

        stage('Deployment Confirmation for nonprod cluster PreProd environment') {
                    
            steps {
                script {
                    input message: 'Do you want to Deploy the application ${NAME}? in PreProd environment'
                }
            }
        }


            stage('Image Tag for PREPROD environment') {
                steps {
                    script {
                        openshift.withCluster() {
                        openshift.tag("${PROJECT_PREPROD}/${NAME}:latest", "${PROJECT_PREPROD}/${NAME}:${env.BUILD_NUMBER}")
                    }
                    echo "STAGE Image Tag  Finished"
                }
              }
            } //END of Image Tag for PREPROD environment


            stage('Push Image to PREPROD QUAY') {
                 steps {
                      retry (count : 3) {
                    script {
                         withCredentials([usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_PASS', usernameVariable: 'QUAY_REGISTRY_USER_NAME'),
                         usernamePassword(credentialsId: 'ocpClusterCreds', passwordVariable: 'CLUSTER_USER_PASS', usernameVariable: 'CLUSTER_USER_NAME')])  
                         {
                           sh "oc login -u  ${CLUSTER_USER_NAME} -p \"${CLUSTER_USER_PASS}\" --insecure-skip-tls-verify=true ${clusterApiUrl} "
                           def temptoken = sh(script: 'echo -n ${CLUSTER_USER_NAME}:`oc whoami -t`  | base64 ', returnStdout: true).trim()
                           echo "temptoken is '${temptoken}'"
                           registryEncodedToken  = temptoken.replaceAll("\n", "")

                           def quaytoken = sh(script: 'echo -n ${QUAY_REGISTRY_USER_NAME}:${QUAY_REGISTRY_USER_PASS}  | base64 ', returnStdout: true).trim()
                           
                           sh """  
                           echo "registryEncodedToken is '${registryEncodedToken}'"
                           echo "quaytoken is '${quaytoken}'"
                           cp /home/jenkins/docker/config.json /home/jenkins/agent/config.json
                           cat  /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistryPass/$quaytoken/g" /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistry/$quayRegistryHostname/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistryPass/$registryEncodedToken/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistry/$ocpRegistryUrl/g"  /home/jenkins/agent/config.json
                           
                           cat  /home/jenkins/agent/config.json
                           
                           oc image mirror -a  /home/jenkins/agent/config.json  --insecure=true ${ocpRegistryUrl}/${PROJECT_PREPROD}/${NAME}:latest  ${quayRegistryHostname}/${quayRegistryOrgNamePreProd}:${env.BUILD_NUMBER}  
                          
                           """  
                    }
                    }
                 }
               }
            } // STAGE Push Image to QUAY END 

           stage('Vulnerability Scan PREPROD') {
               
            steps {
                    script {
                     withCredentials([
                     usernamePassword(credentialsId: 'quayapptoken', passwordVariable: 'QUAY_REGISTRY_USER_TOKEN', usernameVariable: 'username')]){
                        openshift.withCluster() {
                        openshift.withProject(env.DEV_NAMESPACE) {
                            sh """
                                echo "Setting the QUAY_REGISTRY_USER_TOKEN " 
                                export tag=${env.BUILD_NUMBER}
                                export QUAY_API_TOKEN=${QUAY_REGISTRY_USER_TOKEN}
                                export IMAGE_ID_OUTPUT_FILE=/home/jenkins/agent/image-id.txt
                                export VULNERABILITY_OUTPUT_FILE=/home/jenkins/agent/Vulnerability.txt
                                sleep 30s
                                /vulnerability_scan.sh 2> /dev/null || exit 0
                                
                            """      
                        }
                        }
                        }
                    }
            }
        } //END of Vulnerability Scan PREPROD

        stage('Deployment in PreProd Environment- nonprod cluster ') {
                    
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubtoken', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    set -e
                    git config --global user.email "biswajit.dey@goindigo.in"
                    git config --global user.name "$USERNAME"
                    rm -rf skyplus-uirevamp
                    echo "Cloning github code"
                    git clone -b preprod https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    cd skyplus-uirevamp/skyplus/mf/itinerary
                    echo "Updating image tag in the deployment config"
                    sed -i "s/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-preprod\\/itinerary:[a-zA-Z0-9|.\\/|-]*/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-preprod\\/itinerary:${env.BUILD_NUMBER}/" Deployment.yaml
                    echo "Checking the modified tag value in the yaml"
                    cat Deployment.yaml
                    git add -u
                    git commit -m "updating deployment yaml"
                    git push https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    """
                }
             }
            }
        post{
                always{
                    echo 'PREPROD environment Deployment is completed'
                }
                success {  
                    emailext to: "${mailToRecipients}",
                    subject: "${NAME} deployment status",
                    body: "PREPROD Deployment is Successful" 
                }  
                failure {  
                    mail bcc: '', body: "<b>${NAME}</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "${mailToRecipients}";  
                }  

            }


        }
        stage('Akamai_cache_preprod') {

            steps {
               sh """
               cd /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/itinerary/akamai_cache
               ls -ltra
               tar -xvf node_modules.tar.gz
               cp -r .edgerc.txt $HOME
               node cache_clear_preprod.js
               """               
            }
        } //End of cache_clear
        stage('Email Approval for PROD deployment') {
            steps {  
                    script {
                 emailext mimeType: 'text/html',
                 subject: "[Jenkins]-Approval for PROD deployment ${currentBuild.fullDisplayName}",
                 to: "${mailToRecipientsprod}",
                 body: '''
                        Dear Team, <br>
                            <br>                     
                            Deployment of "$(name)" application in the Dev environment is completed. <br>
                            Kindly <a href="${BUILD_URL}input">click here to approve</a> for PROD deployment. <br> 
                            <br>
                            <br>
                         Thanks & Regards,<br>
                         OCP-Team <br>
                         '''

                        def userInput = input id: 'userInput',
                              message: 'Do you approve?', 
                              submitterParameter: 'submitter',
                              submitter: 'jenkins',
                              parameters: [
                                [$class: 'TextParameterDefinition', defaultValue: 'Proceed only with Email Approval', name: 'Comment']]

                        echo ("Comment: "+userInput['Comment'])
                        echo ("submitted by: "+userInput['submitter'])
                      }
                    }
                } //END of Email Approval for PROD deployment

            stage('Image Tag for Prod environment') {
                steps {
                    script {
                    openshift.withCluster() {
                    openshift.tag("${PROJECT_PREPROD}/${NAME}:latest", "${PROJECT_PROD}/${NAME}:${env.BUILD_NUMBER}")
                    }
                    echo "STAGE Image Tag  Finished"
                    }
                }
            }
            stage('Push Image to QUAY PROD environment') {
                 steps {
                      retry (count : 3) {
                    script {
                         withCredentials([usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_PASS', usernameVariable: 'QUAY_REGISTRY_USER_NAME'),
                         usernamePassword(credentialsId: 'ocpClusterCreds', passwordVariable: 'CLUSTER_USER_PASS', usernameVariable: 'CLUSTER_USER_NAME')]) 
                         {
                           sh "oc login -u  ${CLUSTER_USER_NAME} -p \"${CLUSTER_USER_PASS}\" --insecure-skip-tls-verify=true ${clusterApiUrl} "
                           def temptoken = sh(script: 'echo -n ${CLUSTER_USER_NAME}:`oc whoami -t`  | base64 ', returnStdout: true).trim()
                           echo "temptoken is '${temptoken}'"
                           registryEncodedToken  = temptoken.replaceAll("\n", "")

                           def quaytoken = sh(script: 'echo -n ${QUAY_REGISTRY_USER_NAME}:${QUAY_REGISTRY_USER_PASS}  | base64 ', returnStdout: true).trim()
                           
                           sh """  
                           echo "registryEncodedToken is '${registryEncodedToken}'"
                           echo "quaytoken is '${quaytoken}'"
                           cp /home/jenkins/docker/config.json /home/jenkins/agent/config.json
                           cat  /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistryPass/$quaytoken/g" /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistry/$quayRegistryHostname/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistryPass/$registryEncodedToken/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistry/$ocpRegistryUrl/g"  /home/jenkins/agent/config.json
                           
                           cat  /home/jenkins/agent/config.json
                           
                           oc image mirror -a  /home/jenkins/agent/config.json  --insecure=true ${ocpRegistryUrl}/${PROJECT_PREPROD}/${NAME}:latest  ${quayRegistryHostname}/${quayRegistryOrgNameProd}:${env.BUILD_NUMBER}  
                          
                           """  
                    }
                    }
                }
               }
            } // STAGE Push Image to QUAY END 

           stage('Vulnerability Scan PROD env') {               
            steps {
                    script {
                     withCredentials([
                     usernamePassword(credentialsId: 'quayapptoken', passwordVariable: 'QUAY_REGISTRY_USER_TOKEN', usernameVariable: 'username')]){
                        openshift.withCluster() {
                        openshift.withProject(env.DEV_NAMESPACE) {
                            sh """
                                echo "Setting the QUAY_REGISTRY_USER_TOKEN " 
                                export tag=${env.BUILD_NUMBER}
                                export QUAY_API_TOKEN=${QUAY_REGISTRY_USER_TOKEN}
                                export IMAGE_ID_OUTPUT_FILE=/home/jenkins/agent/image-id.txt
                                export VULNERABILITY_OUTPUT_FILE=/home/jenkins/agent/Vulnerability.txt
                                sleep 30s
                                /vulnerability_scan.sh 2> /dev/null || exit 0
                                
                            """      
                        }
                        }
                        }
                    }
              }
            } //END of Vulnerability Scan PROD env


        stage('Deployment in Production Environment- ARO app prod cluster') {                    
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubtoken', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    set -e
                    git config --global user.email "biswajit.dey@goindigo.in"
                    git config --global user.name "$USERNAME"
                    rm -rf skyplus-uirevamp
                    echo "Cloning github code"
                    git clone -b prod https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    cd skyplus-uirevamp/skyplus/mf/itinerary
                    echo "Updating image tag in the deployment config"
                    sed -i "s/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-prod\\/itinerary:[a-zA-Z0-9|.\\/|-]*/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-prod\\/itinerary:${env.BUILD_NUMBER}/" Deployment.yaml
                    echo "Checking the modified tag value in the yaml"
                    cat Deployment.yaml
                    git add -u
                    git commit -m "updating deployment yaml"
                    git push https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    """
                }
            }
        }
        post{
                always{
                    echo 'PROD environment Deployment is Successful'  
                }
                success { 
                    emailext to: "${mailToRecipients}",
                    subject: "${NAME} deployment status",
                    body: "PROD Deployment is Successful" 
                }  
                failure {  
                    mail bcc: '', body: "<b>${NAME}</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "ERROR CI: Project name -> ${env.JOB_NAME}", to: "${mailToRecipients}";  
                }  
            }

        } //Deployment in Production Environment- ARO app prod cluster
        
        stage('Akamai_cache_prod') {

            steps {
               sh """
               cd /home/jenkins/agent/workspace/itinerary-release-mf-uirevamp/monorepo/packages/itinerary/akamai_cache
               ls -ltra
               tar -xvf node_modules.tar.gz
               cp -r .edgerc.txt $HOME
               node cache_clear_prod.js
               """               
            }
        } //End of cache_clear 

    } //End of Stages

} //End of Pipeline
