def templatePath = "monorepo/packages/split-pnr/cicd/template-dev.json"
def projectPath = " './monorepo/packages/split-pnr/' "
def quayRegistryHostname = "prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in"
def quayRegistryOrgNameDev = "mfrevamp-dev/split-pnr"
def quayRegistryOrgNameQA = "mfrevamp-qa/split-pnr"
def quayRegistryOrgNameUAT = "mfrevamp-uat/split-pnr"
def quayRegistryOrgNameProd = "mfrevamp-prod/split-pnr"
def clusterApiUrl= "https://api.ocpmgmtcl01.goindigo.in:6443"
def ocpRegistryUrl ="image-registry.openshift-image-registry.svc:5000"
def ocpSonarqubeUrl = "https://sonarqube-sonarqube.apps.ocpmgmtcl01.goindigo.in/"


//Email ID's Detail
def mailToRecipients = "Priyanka.x.Koneru@goindigo.in"
def mailToRecipientsqa = 'Priyanka.x.Koneru@goindigo.in'
def mailToRecipientsuat = 'Priyanka.x.Koneru@goindigo.in'
def mailToRecipientsprod = 'abhinav.srivastava@goindigo.in'
def useremail='Priyanka.x.Koneru@goindigo.in'

pipeline {


    agent { label 'nodejs-common' }

    environment {

        PROJECT_DEV = "mfrevamp-dev"
        PROJECT_QA = "mfrevamp-qa"
        PROJECT_UAT = "mfrevamp-uat"
        PROJECT_PROD = "mfrevamp-prod"
        NAME = "split-pnr"
        ENV_DEV = "dev"
        ENV_QA = "qa"
        ENV_PROD = "prod"
        ENV_UAT = "uat"
        QUAY_REPO_NAME_DEV="ms-dev/split-pnr"
        QUAY_REPO_NAME_QA="ms-qa/split-pnr"
        QUAY_REPO_NAME_UAT="ms-uat/split-pnr"
        QUAY_REPO_NAME_PROD="ms-prod/split-pnr"
        QUAY_URL="https://prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in"
        SONAR_LOGIN= credentials('sonarqube_login_token')
    }
    parameters {

        choice(
                choices: 'dev\nqa\nuat\ndev.qa\nqa.uat\ndev.qa.uat',
                description: 'Select the environment for deployment',
                name: 'name'
        )
    }

    stages {

        stage('Checkout') {
           steps {
                checkout scm                
            }
        } //End of Stage Checkout

        stage('Code Quality Check via SonarQube') {
          steps {
             script {
               def scannerHome = tool 'sonarqube_server_mgmt';
                 withSonarQubeEnv("sonarqube_server_mgmt") {
                 sh "${tool("sonarqube_server_mgmt")}/bin/sonar-scanner \
                 -Dsonar.projectKey=split-pnr-uirevamp \
                 -Dsonar.sources=/home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo/packages/split-pnr \
                 -Dsonar.css.node=. \
                 -Dsonar.host.url=https://sonarqube-sonarqube.apps.ocpmgmtcl01.goindigo.in \
                 -Dsonar.login=${SONAR_LOGIN}"
               }
           }
        }
        }
        stage("Quality gate") {
            steps {
                waitForQualityGate abortPipeline: false
            }
        post{
                success {
                    emailext to: "${mailToRecipients}",
                    subject: "${NAME} Sonarqube (Code Analysis)",
                    body: " Sonarqube (Code Analysis) is Successful for ${NAME} with build number ${env.BUILD_NUMBER} <br> Sonarqube login URL ${ocpSonarqubeUrl} <br> Please check the report after login into sonarqube server URL by using Azure Active Directory Credentials"
                }
                failure {  
                    mail bcc: '', body: "<b>${NAME} sonarqube analysis failed. Please login using the following URL to check the report--->  ${ocpSonarqubeUrl} </b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> Build URL: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: 'OCPSUPPORT@goindigo.in', mimeType: 'text/html', replyTo: '', subject: "SonarQube Quality Gate Failure: Project name -> ${env.JOB_NAME}", to: "${mailToRecipients}";  
                }  
           }
        } 
        stage('build') {
            steps { 
                script{
                   sh """
                    mkdir /home/jenkins/agent/app
                    cp /home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo/package.json /home/jenkins/agent/app/
                    cd /home/jenkins/agent/app
                    mkdir -p /home/jenkins/agent/app/packages/split-pnr
                    mkdir -p /home/jenkins/agent/app/packages/skyplus-design-system-app
                    cp /home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo/packages/split-pnr/package.json /home/jenkins/agent/app/packages/split-pnr
                    cp /home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo/packages/skyplus-design-system-app/package.json /home/jenkins/agent/app/packages/skyplus-design-system-app
                    cd /home/jenkins/agent/app
                    export npm_config_cache=/home/jenkins/agent/app
                    npm install
                    cp -r /home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo/packages/split-pnr /home/jenkins/agent/app/packages
                    cp -r /home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo/packages/skyplus-design-system-app /home/jenkins/agent/app/packages
                    cd /home/jenkins/agent/app/packages/skyplus-design-system-app && npm run build
                    cd /home/jenkins/agent/app/packages/split-pnr && npm run build
                    ls -ltra /home/jenkins/agent/app/packages/split-pnr/
                    cp -r /home/jenkins/agent/app/packages/split-pnr/dist /home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo
                    """
                }
            }
        } //End of Stage Build

        stage ('Deploy Template') {

                      steps{
                             script{
                                        try {
                                    openshift.withCluster() {
                                        openshift.withProject(env.PROJECT_DEV) {
                                                echo "Using project: ${openshift.project()}"

                                                def templateSelector = openshift.selector( "template", "${NAME}")

                                                if(openshift.selector("bc", [ template : "${NAME}"]).exists()){
                                                openshift.selector("bc", "${NAME}").delete();
                                                }
                                                if(openshift.selector("is", [ template : "${NAME}"]).exists()){
                                                openshift.selector("is", "${NAME}").delete();
                                                }

                                                openshift.newApp(templatePath, "-p PROJECT_DEV=${env.PROJECT_DEV} -p NAME=${env.NAME} -p ENV_DEV=${env.ENV_DEV}")

                                                }
                                                }
                                                }

                                         catch ( e ) {
                                                echo e.getMessage()
                                                error "Deploy Template not successful."
                                             }
                                 }
                                    }

                         } // End of Stage Deploy Template
          
        stage('Image build') {
                                steps{
                                          script{
                                            try {
                                            timeout(time: 100, unit: 'MINUTES') {
                                                                openshift.withCluster() {
                                                                openshift.withProject(env.PROJECT_DEV) {
                                                                def build = openshift.selector("bc", "split-pnr").startBuild("--from-file=/home/jenkins/agent/workspace/split-pnr-mf-uirevamp/monorepo", "--wait=true")
                                                                build.untilEach {
                                                                        echo "Using project in Image Build ${build}"
                                                                        return it.object().status.phase == "Complete"
                                                                }
                                                     }
                                                 }
                                             }
                                             echo "STAGE Image Build Template Finished"
                                     }
                                           catch ( e ) {
                                                echo e.getMessage()
                                                error "Build not successful."
                                       }
                                     }
                                }
                               } // End of Stage Image build
           stage('Push Image to QUAY') {
            when {
                expression { 
                    params.name == 'dev' ||
                    params.name == 'dev.qa' ||
                    params.name == 'dev.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
                 steps {
                    script {
                         withCredentials([usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_PASS', usernameVariable: 'QUAY_REGISTRY_USER_NAME'),
                         usernamePassword(credentialsId: 'ocpClusterCreds', passwordVariable: 'CLUSTER_USER_PASS', usernameVariable: 'CLUSTER_USER_NAME')]) 
                         {
                           sh "oc login -u  ${CLUSTER_USER_NAME} -p \"${CLUSTER_USER_PASS}\" --insecure-skip-tls-verify=true ${clusterApiUrl} "
                           def temptoken = sh(script: 'echo -n ${CLUSTER_USER_NAME}:`oc whoami -t`  | base64 ', returnStdout: true).trim()
                           echo "temptoken is '${temptoken}'"
                           registryEncodedToken  = temptoken.replaceAll("\n", "")

                           def quaytoken = sh(script: 'echo -n ${QUAY_REGISTRY_USER_NAME}:${QUAY_REGISTRY_USER_PASS}  | base64 ', returnStdout: true).trim()
                           
                           sh """  
                           echo "registryEncodedToken is '${registryEncodedToken}'"
                           echo "quaytoken is '${quaytoken}'"
                           cp /home/jenkins/docker/config.json /home/jenkins/agent/config.json
                           cat  /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistryPass/$quaytoken/g" /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistry/$quayRegistryHostname/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistryPass/$registryEncodedToken/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistry/$ocpRegistryUrl/g"  /home/jenkins/agent/config.json
                           
                           cat  /home/jenkins/agent/config.json
                          
                           oc image mirror -a  /home/jenkins/agent/config.json  --insecure=true ${ocpRegistryUrl}/${PROJECT_DEV}/${NAME}:latest  ${quayRegistryHostname}/${quayRegistryOrgNameDev}:${env.BUILD_NUMBER}  
                           """  
                    }
                    }
        }
         } // STAGE Push Image to QUAY END 


           stage('Vulnerability Scan') {
            when {
                expression { 
                    params.name == 'dev' ||
                    params.name == 'dev.qa' ||
                    params.name == 'dev.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
               
            steps {
                    script {
                     withCredentials([
                     usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_TOKEN', usernameVariable: 'username')]){
                        openshift.withCluster() {
                        openshift.withProject(env.DEV_NAMESPACE) {
                            sh """
                                echo "Setting the QUAY_REGISTRY_USER_TOKEN " 
                                export tag=${env.BUILD_NUMBER}
                                export QUAY_API_TOKEN=${QUAY_REGISTRY_USER_TOKEN}
                                export IMAGE_ID_OUTPUT_FILE=/home/jenkins/agent/image-id.txt
                                export VULNERABILITY_OUTPUT_FILE=/home/jenkins/agent/Vulnerability.txt
                                /vulnerability_scan.sh 2> /dev/null || exit 0
                                
                            """      
                        }
                        }
                        }
                    }
            }
        }


        stage('Deployment In nonprod cluster DEV environment') {
            when {
                expression { 
                    params.name == 'dev' ||
                    params.name == 'dev.qa' ||
                    params.name == 'dev.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }                    
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubtoken', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    set -e
                    git config --global user.email "biswajit.dey@goindigo.in"
                    git config --global user.name "BISWAJIT-DEY_indigo"
                    rm -rf skyplus-uirevamp
                    echo "Cloning github code"
                    git clone -b dev https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    ls
                    cd skyplus-uirevamp/skyplus/mf/split-pnr
                    ls
                    echo "Updating image tag in the deployment config"
                    sed -i "s/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-dev\\/split-pnr:[a-zA-Z0-9|.\\/|-]*/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-dev\\/split-pnr:${env.BUILD_NUMBER}/" Deployment.yaml
                    echo "Checking the modified tag value in the yaml"
                    cat Deployment.yaml
                    git add -u
                    git commit -m "updating deployment yaml"
                    git push https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    """
                    }
                }
            }
        }

        stage('Image Tag for QA environment nonprod') {
            when {
                expression { 
                    params.name == 'qa' ||
                    params.name == 'dev.qa' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                    openshift.tag("${PROJECT_DEV}/${NAME}:latest", "${PROJECT_QA}/${NAME}:${env.BUILD_NUMBER}")
                }
                echo "STAGE Image Tag  Finished"
                }
            }
        }
           stage('Push Image to QUAY QA ENV') {
            when {
                expression { 
                    params.name == 'qa' ||
                    params.name == 'dev.qa' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
                 steps {
                      retry (count : 3) {
                    script {
                         withCredentials([usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_PASS', usernameVariable: 'QUAY_REGISTRY_USER_NAME'),
                         usernamePassword(credentialsId: 'ocpClusterCreds', passwordVariable: 'CLUSTER_USER_PASS', usernameVariable: 'CLUSTER_USER_NAME')]) 
                         {
                           sh "oc login -u  ${CLUSTER_USER_NAME} -p \"${CLUSTER_USER_PASS}\" --insecure-skip-tls-verify=true ${clusterApiUrl} "
                           def temptoken = sh(script: 'echo -n ${CLUSTER_USER_NAME}:`oc whoami -t`  | base64 ', returnStdout: true).trim()
                           echo "temptoken is '${temptoken}'"
                           registryEncodedToken  = temptoken.replaceAll("\n", "")

                           def quaytoken = sh(script: 'echo -n ${QUAY_REGISTRY_USER_NAME}:${QUAY_REGISTRY_USER_PASS}  | base64 ', returnStdout: true).trim()
                           
                           sh """  
                           echo "registryEncodedToken is '${registryEncodedToken}'"
                           echo "quaytoken is '${quaytoken}'"
                           cp /home/jenkins/docker/config.json /home/jenkins/agent/config.json
                           cat  /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistryPass/$quaytoken/g" /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistry/$quayRegistryHostname/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistryPass/$registryEncodedToken/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistry/$ocpRegistryUrl/g"  /home/jenkins/agent/config.json
                           
                           cat  /home/jenkins/agent/config.json
                           
                           oc image mirror -a  /home/jenkins/agent/config.json  --insecure=true ${ocpRegistryUrl}/${PROJECT_DEV}/${NAME}:latest  ${quayRegistryHostname}/${quayRegistryOrgNameQA}:${env.BUILD_NUMBER}  
                          
                           """  
                    }
                    }
      }
               }
         } // STAGE Push Image to QUAY END 


           stage('Vulnerability Scan QA env') {
            when {
                expression { 
                    params.name == 'qa' ||
                    params.name == 'dev.qa' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
               
            steps {
                    script {
                     withCredentials([
                     usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_TOKEN', usernameVariable: 'username')]){
                        openshift.withCluster() {
                        openshift.withProject(env.DEV_NAMESPACE) {
                            sh """
                                echo "Setting the QUAY_REGISTRY_USER_TOKEN " 
                                export tag=${env.BUILD_NUMBER}
                                export QUAY_API_TOKEN=${QUAY_REGISTRY_USER_TOKEN}
                                export IMAGE_ID_OUTPUT_FILE=/home/jenkins/agent/image-id.txt
                                export VULNERABILITY_OUTPUT_FILE=/home/jenkins/agent/Vulnerability.txt
                                sleep 30s
                                /vulnerability_scan.sh 2> /dev/null || exit 0
                                
                            """      
                        }
                        }
                        }
                    }
            }
        }
        stage('Deployment Confirmation for nonprod cluster QA environment') {
            when {
                expression { 
                    params.name == 'qa' ||
                    params.name == 'dev.qa' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
                    
            steps {
                script {
                    input message: 'Do you want to Deploy the application ${NAME}? in QA environment'
                }
            }
        }
        stage('Deployment In nonprod cluster QA environment') {
            when {
                expression { 
                    params.name == 'qa' ||
                    params.name == 'dev.qa' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }                    
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubtoken', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    set -e
                    git config --global user.email "biswajit.dey@goindigo.in"
                    git config --global user.name "BISWAJIT-DEY_indigo"
                    rm -rf skyplus-uirevamp
                    echo "Cloning github code"
                    git clone -b qa https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    cd skyplus-uirevamp/skyplus/mf/split-pnr
                    echo "Updating image tag in the deployment config"
                    sed -i "s/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-qa\\/split-pnr:[a-zA-Z0-9|.\\/|-]*/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-qa\\/split-pnr:${env.BUILD_NUMBER}/" Deployment.yaml
                    echo "Checking the modified tag value in the yaml"
                    cat Deployment.yaml
                    git add -u
                    git commit -m "updating deployment yaml"
                    git push https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    """
                    }
                }
            }
        }



    stage('Image Tag for UAT environment nonprod') {
            when {
                expression { 
                    params.name == 'uat' ||
                    params.name == 'dev.uat' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                    openshift.tag("${PROJECT_DEV}/${NAME}:latest", "${PROJECT_UAT}/${NAME}:${env.BUILD_NUMBER}")
                }
                echo "STAGE Image Tag  Finished"
                }
            }
        }
           stage('Push Image to QUAY UAT ENV') {
            when {
                expression { 
                    params.name == 'uat' ||
                    params.name == 'dev.uat' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }
                 steps {
                      retry (count : 3) {
                    script {
                         withCredentials([usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_PASS', usernameVariable: 'QUAY_REGISTRY_USER_NAME'),
                         usernamePassword(credentialsId: 'ocpClusterCreds', passwordVariable: 'CLUSTER_USER_PASS', usernameVariable: 'CLUSTER_USER_NAME')]) 
                         {
                           sh "oc login -u  ${CLUSTER_USER_NAME} -p \"${CLUSTER_USER_PASS}\" --insecure-skip-tls-verify=true ${clusterApiUrl} "
                           def temptoken = sh(script: 'echo -n ${CLUSTER_USER_NAME}:`oc whoami -t`  | base64 ', returnStdout: true).trim()
                           echo "temptoken is '${temptoken}'"
                           registryEncodedToken  = temptoken.replaceAll("\n", "")

                           def quaytoken = sh(script: 'echo -n ${QUAY_REGISTRY_USER_NAME}:${QUAY_REGISTRY_USER_PASS}  | base64 ', returnStdout: true).trim()
                           
                           sh """  
                           echo "registryEncodedToken is '${registryEncodedToken}'"
                           echo "quaytoken is '${quaytoken}'"
                           cp /home/jenkins/docker/config.json /home/jenkins/agent/config.json
                           cat  /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistryPass/$quaytoken/g" /home/jenkins/agent/config.json
                           sed -i "s/SourceRegistry/$quayRegistryHostname/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistryPass/$registryEncodedToken/g"  /home/jenkins/agent/config.json
                           sed -i "s/DestRegistry/$ocpRegistryUrl/g"  /home/jenkins/agent/config.json
                           
                           cat  /home/jenkins/agent/config.json
                           
                           oc image mirror -a  /home/jenkins/agent/config.json  --insecure=true ${ocpRegistryUrl}/${PROJECT_DEV}/${NAME}:latest  ${quayRegistryHostname}/${quayRegistryOrgNameUAT}:${env.BUILD_NUMBER}  
                          
                           """  
                    }
                    }
                }
               }
            } // STAGE Push Image to QUAY END 


           stage('Vulnerability Scan UAT env') {
            when {
                expression { 
                    params.name == 'uat' ||
                    params.name == 'dev.uat' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }               
            steps {
                    script {
                     withCredentials([
                     usernamePassword(credentialsId: 'quaycred', passwordVariable: 'QUAY_REGISTRY_USER_TOKEN', usernameVariable: 'username')]){
                        openshift.withCluster() {
                        openshift.withProject(env.DEV_NAMESPACE) {
                            sh """
                                echo "Setting the QUAY_REGISTRY_USER_TOKEN " 
                                export tag=${env.BUILD_NUMBER}
                                export QUAY_API_TOKEN=${QUAY_REGISTRY_USER_TOKEN}
                                export IMAGE_ID_OUTPUT_FILE=/home/jenkins/agent/image-id.txt
                                export VULNERABILITY_OUTPUT_FILE=/home/jenkins/agent/Vulnerability.txt
                                sleep 30s
                                /vulnerability_scan.sh 2> /dev/null || exit 0
                                
                            """      
                        }
                        }
                        }
                    }
            }
        }		
        stage('Deployment Confirmation for nonprod cluster UAT environment') {
            when {
                expression { 
                    params.name == 'uat' ||
                    params.name == 'dev.uat' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }                    
            steps {
                script {
                    input message: 'Do you want to Deploy the application ${NAME}? in UAT environment'
                }
            }
        }
        stage('Deployment In nonprod cluster UAT environment') {
            when {
                expression { 
                    params.name == 'uat' ||
                    params.name == 'dev.uat' ||
                    params.name == 'qa.uat' ||
                    params.name == 'dev.qa.uat'
                }
            }                    
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'githubtoken', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    set -e
                    git config --global user.email "biswajit.dey@goindigo.in"
                    git config --global user.name "BISWAJIT-DEY_indigo"
                    rm -rf skyplus-uirevamp
                    echo "Cloning github code"
                    git clone -b uat https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    cd skyplus-uirevamp/skyplus/mf/split-pnr
                    echo "Updating image tag in the deployment config"
                    sed -i "s/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-uat\\/split-pnr:[a-zA-Z0-9|.\\/|-]*/image: prod-iga-quay-image-registry.apps.ocpmgmtcl01.goindigo.in\\/mfrevamp-uat\\/split-pnr:${env.BUILD_NUMBER}/" Deployment.yaml
                    echo "Checking the modified tag value in the yaml"
                    cat Deployment.yaml
                    git add -u
                    git commit -m "updating deployment yaml"
                    git push https://$USERNAME:$PASSWORD@github.com/dev-Indigo/skyplus-uirevamp.git
                    """
                    }
                }
            }
        }


			
    } //End of Stages

} //End of Pipeline
